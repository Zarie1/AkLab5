
#include <linux/init.h>
#include <linux/module.h>
#include <linux/printk.h>
#include <linux/types.h>
#include <linux/list.h>
#include <linux/ktime.h>
#include <linux/slab.h>
#include "hello1.h"

MODULE_AUTHOR("Romanuk Kostya");
MODULE_DESCRIPTION("Lab 4 - hello1");
MODULE_LICENSE("Dual BSD/GPL");

struct event_list {
    struct list_head list;
    ktime_t start_time;
    ktime_t end_time;
};

static LIST_HEAD(event_list_head);

void print_hello(void) {
    struct event_list *event;
    ktime_t start, end;

    start = ktime_get();
    pr_info("Hello, World!\n");
    end = ktime_get();

    event = kmalloc(sizeof(struct event_list), GFP_KERNEL);
    if (!event) {
        pr_err("Failed to allocate memory for event\n");
        return;
    }

    event->start_time = start;
    event->end_time = end;
    list_add_tail(&event->list, &event_list_head);
}
EXPORT_SYMBOL(print_hello);

static void __exit hello1_exit(void) {
    struct event_list *md, *tmp;
    list_for_each_entry_safe(md, tmp, &event_list_head, list) {
        pr_info("Start: %lld, End: %lld, Duration: %lld ns\n",
                md->start_time, md->end_time,
                ktime_to_ns(md->end_time) - ktime_to_ns(md->start_time));
        list_del(&md->list);
        kfree(md);
    }
}

module_exit(hello1_exit);